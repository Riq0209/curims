#_title_
HTML_Link_Menu_Paginate
#_end_

#_des_
### The core module to dynamically generate web application menu (with menu 
### items pagination support) using standard HTML hypertext links. The 
### hypertext links generated are mainly used to provide users an access 
### points to application services via HTTP-GET method.
#_end_

#_dep_
### <b>Webman-framework's Core Modules:</b><br />
### <ul>
### <li>HTML_Link_Menu (Inheritance)</li>
### </ul>
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>1. View Template</b><p />
### Following Webman-framework's "Convention over Configuration" (CoC) the 
### view template to render HTML_Link_Menu_Paginate result content is simply a 
### MENU template-element with <c>dynamic_menu_items_</c> word pattern as its 
### content place-holder. The template element can be later manipulated inside 
### the <c>process_MENU</c> hook function (see section 4).
#_end_
<html>
<body>
<!-- start_view_ //-->
<!-- start_menu_ name=numspell //-->
dynamic_menu_items_
<!-- end_menu_ //-->
<!-- end_view_ //-->
</body>
</html>

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>2. Instantiation and Basic Parameter Setting</b><p />
### 
#_end_

my $html_menu = new HTML_Link_Menu_Paginate;

#_doc_
### <b>2.1 Links, Captions, and Attributes.</b><p />
### The next two functions are mandatorily to be called just after the 
### instantiation or the module can't generate the intended menu links. The 
### <c>@menu_items</c> is an array of the link captions while <c>@menu_links</c> 
### is an array of the links attributes. The link attributes normally a CGI  
### CGI parameters passed via HTTP-GET method. The link attribute should be 
### the uniques one which can't be automatically generated by the module itself 
### (see section 2.3).   
### 
#_end_
$html_menu->set_Menu_Items(@menu_items);
$html_menu->set_Menu_Links(@menu_links);

#_doc_
### <b>2.2 Link Items Pagination.</b><p />
### Pagination support for large number of link items can be done by passing 
### <c>$num_view</c> and <c>$num_view</c> arguments to the next two functions. 
### The <c>$num_set</c> argument normally can be retrieved from 
### <c>$cgi->param($item_set_ref_name)</c>. Read section 2.3 for more 
### information about the <c>$item_set_ref_name</c> argument.
#_end_
$html_menu->set_Items_View_Num($num_view);
$html_menu->set_Items_Set_Num($num_set);

#_doc_
### <b>2.3 Basic and Additional Links Attributes</b><p />
### Function to automatically set the basic standard link items attributes. 
### The script name <c>"index.cgi"</c> is the default CGI main script name in 
### Webman-framework. The arguments <c>$link_ref_name</c> and 
### <c>$item_set_ref_name</c> are the link attributes name used to refer to 
### current selected link item name and link items set number. Both will exist 
### as CGI parameters passed via HTTP-GET method.
#_end_
$html_menu->set_Auto_Menu_Links("index.cgi", $link_ref_name, $item_set_ref_name);
#_doc_
### Other additional GET-data attributes which are indentical for all link 
### items can be added using the next function.
#_end_
$html_menu->add_GET_Data_Links_Source("param_1=value_1&...&param_n=value_n");

#_doc_
### <b>2.4 Current Selected Link Item</b><p />
### The argument <c>$current_selected_link</c> is the current selected link 
### item name. Using the previous setting (section 2.3 above) it's possible to 
### have its value from <c>$cgi->param($link_ref_name)</c> function call.
#_end_
$html_menu->set_Active_Menu_Item($current_selected_link);

#_doc_
### <b>2.5 Link Items Separator and Next/Previous Navigation Tags </b><p />
### The default separator, next, and previous tags are "|", "&gt;&gt;", and 
### "&lt;&lt;".
#_end_
$html_menu->set_Separator_Tag($tag_separator);
$html_menu->set_Next_Tag($tag_next);
$html_menu->set_Previous_Tag($tag_previous);

#_doc_
### <b>2.6 Unselected Links Text Color</b><p />
#_end_
$html_menu->set_Non_Selected_Link_Color($color_link_active);

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>3. Processing Template Element Content</b><p />
#_end_
$html_menu->set_Menu_Template_Content($te_content);
my $content = $html_menu->get_Menu;
$html_menu->reset_Menu;
#_doc_
### The <c>$html_menu->reset_Menu</c> function call is an option to reset the 
### link items captions and their attributes previously set in section 2.1.
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>4. Implementation Inside Hook Function</b><p />
### In most cases, link menu items generation from application's main link 
### structure does not requires this type of hook function implementatiom since 
### it has been conveniently supported by webman_dynamic_links framework's 
### component type module.
#_end_
sub process_MENU { 
    my $this = shift @_;
    my $te = shift @_;

    my $cgi = $this->get_CGI;
    my $dbu = $this->get_DBU;
    my $db_conn = $this->get_DB_Conn;
    
    my $te_content = $te->get_Content;
    my $te_type_num = $te->get_Type_Num;
    my $te_type_name = $te->get_Name;
    
    ### The "link_id" argument is Webman-framework's standard CGI parameter 
    ### name that refer to current link item selected from the application 
    ### main link structure. It will be passed as an additional GET-data to  
    ### dynamic link items to be generated below. So, each click on them will  
    ### point back to current selected application's main link item.
    my $link_id = $cgi->param("link_id");
    
    if ($te_type_name eq "numspell") {
        ### Set menu's link items and their unique attributes.
        my @menu_items = (1, 2, 3, 4, 5, 6, 7, 8);
        my @menu_links = ("spell=one", "spell=two", "spell=three", "spell=four", 
                          "spell=five", "spell=six", "spell=seven", "spell=eight");    

        ### Start using module to generate dynamic links.
        my $html_menu = new HTML_Link_Menu_Paginate;

        $html_menu->set_Menu_Items(@menu_items);
        $html_menu->set_Menu_Links(@menu_links);

        $html_menu->set_Items_View_Num(3);
        $html_menu->set_Items_Set_Num($cgi->param("dmisn"));

        ### num = number, dmisn = dynamic_menu_item_set_number
        $html_menu->set_Auto_Menu_Links("index.cgi", "num", "dmisn");
        $html_menu->add_GET_Data_Links_Source("link_id=$link_id");

        $html_menu->set_Active_Menu_Item($cgi->param("num"));

        $html_menu->set_Menu_Template_Content($te_content);
        my $content = $html_menu->get_Menu;

        $this->add_Content($content);
    }
}