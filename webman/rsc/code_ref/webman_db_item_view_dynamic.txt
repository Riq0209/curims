#_title_
webman_db_item_view_dynamic 
#_end_

#_des_
### Component-type module which provides dynamic control on database table 
### items view/listing.
#_end_

#_dep_
### <b>Webman-framework's Core Modules:</b><br />
### <ul>
### <li>DBI_HTML_Map (Composition)</li>
### <li>HTML_Link_Menu (Composition)</li>
### <li>HTML_Link_Menu_Paginate (Composition)</li>
### <li>Select_Option (Composition)</li>
### <li>TLD_HTML_Map (Composition)</li>
### </ul>
### <br />
### <b>Webman-framework's Component-type Modules:</b><br />
### <ul>
### <li>CGI_Component::webman_CGI_component (Inheritance)</li>
### <li>webman_link_path_generator (Composition)</li>
### </ul>
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>1. View Output Example</b>
### <p />
### Below is an example of view ouput generated by webman_db_item_view_dynamic 
### component type module. Always refer to this output example as an aid to 
### better understand module documentation explained in the next main 
### sections.
### <p />
### <img src="webman_db_item_view_dynamic.jpg">
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>2. View Template</b>
### <p />
### The view template is considerable complex since it's used to support 
### dynamic features of database items listing. 
### <p />
### The DYNAMIC_CONTENT template-element (line 4) named <c>link_path</c> will 
### be processed by <c>webman_link_path_generator</c> module inside 
### <c>process_DYNAMIC</c> hook function. It's used as place-holder to render 
### current application's link path when webman_db_item_view_dynamic module 
### is called. The next series of DYNAMIC_CONTENT template-elements 
### (lines 7-9) named <c>db_items_num_begin</c>, <c>db_items_num_end</c>, and 
### <c>db_items_num_total</c> are used as place-holders to provide information 
### about current range of items set being display from all available items in 
### the database table.
### <p />
### The MENU template-element named <c>caption</c> (lines 13-18) is a column 
### headers for item fields to be listed using LIST template-element named 
### <c>main</c> (lines 22-27). The <c>caption</c> MENU template-element will   
### be passed to <c>process_MENU</c> hook function and processed by 
### HTML_Link_Menu core module. It use word patterns <c>menu_item0_</c> 
### and <c>menu_item1_</c> as place-holders to display the column captions of   
### item fields mapped by <c>$tld_<i>field_name_1</i>_</c> and 
### <c>$tld_<i>field_name_3</i>_</c> (word patterns used inside <c>main</c> 
### LIST template-element). The generated captions text will act as HTML-links   
### which provide options to users to sort database items based on particular 
### field name (column).     
### <p /> 
### Inside the webman_db_item_view_dynamic component-type module, database 
### item list structure is first constructed as Table_List_Data instance via 
### DBI_HTML_Map core module. The aforementioned <c>main</c> LIST 
### template-element will be passed to <c>process_LIST</c> hook function 
### before it's manipulated by TLD_HTML_Map, the core module that responsible 
### to map items from Table_List_Data instance into LIST template-element 
### content structure. Note that there are also <c>$tld_row_class_</c> and 
### <c>$tld_num_</c> word patterns enclosed within <c>main</c> LIST 
### template-element. The former is a place-holder for a new column to be 
### added into the list via child module customizations (section 5) to control 
### HTML-table rows view presentation using predefined CSS class. The later is 
### a place-holder for default column name of list item number (related 
### information can be found in section 3, lines 34-46).
### <p />
### The HTML-form (lines 33-51) is used to control the number of items 
### displayed on each list set and the current active list set number. It's  
### actually a control element for database items listing with pagination 
### support.  
### <p />
### Inside the form there is fifth DYNAMIC_CONTENT template-element (line 34) 
### named <c>form_hidden_field</c>, used as place-holder for HTML-form's 
### hidden input-element. This hidden input-element is used as an entity to 
### pass the parameter named <c>link_id</c> (via POST-method) which is the 
### standard CGI parameter name used to refer nodes' IDs that construct the 
### overall application's link structure. The logic is to use again node's 
### link-id which is used to call webman_db_item_view_dynamic module 
### previously.
### <p />
### The text input-element (line 37) enclosed inside CGIHTML template-element 
### is the number of database items to be displayed per page. Template word 
### pattern <c>dynamic_menu_items_</c> within the MENU template-element named 
### <c>list</c> (line 43) will be processed by HTML_Link_Menu_Paginate core 
### module inside <c>process_MENU</c> hook function. Its main function is to 
### display current set of page index numbers available for users to browse. 
### The SELECT template-element named <c>lsn</c> (line 49) will be processed 
### inside <c>process_SELECT</c> hook function by Select_Option core module to 
### generate HTML-form's select input-element options that is the available 
### number of set of page index numbers. It's used to quickly jump to other 
### set of page index numbers.  
#_end_
#_code_num_ 4-4:#ffdddd,7-9:#ddffdd,13-18:#ffddff,22-27:#ddffff,33-33,34-34:#ffeedd,35-36,37-37:#d5effb,38-42,43-43:#ffde9f,44-47,48-50:#e9efda,51-51 1
<html>
<body>
<!-- start_view_ //-->
<!-- dynamic_content_ name=link_path //--> &gt; List Title
<p />

<!-- dynamic_content_ name=db_items_num_begin //--> -
<!-- dynamic_content_ name=db_items_num_end //--> of
<!-- dynamic_content_ name=db_items_num_total //--> Records.

<table border="1">
  <!-- start_menu_ name=caption //-->
  <tr>
    <th>Num.</th>
    <th>menu_item0_</th>
    <th>field_caption_2</th>
    <th>menu_item1_</th>
  </tr>
  <!-- end_menu_ //-->

  <!-- start_list_ name=main //-->
  <tr class="$tld_row_class_">
    <td align="right">$tld_num_.</td>
    <td>$tld_field_name_1_</td>
    <td>$tld_field_name_2_</td>
    <td>$tld_field_name_3_</td>
  </tr>
  <!-- end_list_ //-->
</table>

<p />

<form name="tld_view_dynamic" method="post" action="index.cgi">
  <!-- dynamic_content_ name=form_hidden_field //-->
  
  <!-- start_cgihtml_ //-->
  Items/List: <input name="inl_param_name" type="text" id="inl_param_name" value="$cgi_inl_param_name_" size="3"> 
  <!-- end_cgihtml_ //-->
  
  &nbsp;
  
  <!-- start_menu_ name=list //-->
    dynamic_menu_items_
  <!-- end_menu_ //-->
  &nbsp;

  List Set Num. :
  <select name="lsn" onChange="document.tld_view_dynamic.submit()">
    <!-- select_ name=lsn //-->
  </select>
</form>
<!-- end_view_ //-->
</body>
</html>
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>3. Instantiation and Basic Parameter Setting</b>
### <p />
### The most basic setting is to provide the SQL string command to query the 
### items to be listed. It can manually be done by directly passing the SQL 
### string command (line 9) together with other possible word patterns 
### (<c>$cgi_<i>key_field_name</i>_</c>) to map values from the CGI parameters 
### passed to the module. The more convenient and dynamic one is to 
### automatically generate the SQL command by setting the following 
### parameters:
### <ul>
### <li>Table name of items to be listed (line 11)</li>
### <li>SQL command to filter the items (lines 13-21)</li>
### <li>CGI parameter name to represent SQL list order command (line 23)</li>
### </ul>
### Generally the above parameter settings will generate the SQL string 
### command in the form of: 
### <sql>"select * from </sql><c>$table_name</c> <sql><i>SQL_filter_command</i> 
### <i>SQL_order_command</i>"</sql>
### <p />
### The <sql><i>SQL_filter_command</i></sql> is a part of SQL string command 
### generated based on parameter settings via function calls at lines 13-21. 
### The generated SQL string command is a concatenation of strings as follows: 
### <sql>"where </sql><c>$filter_field_name</c><sql>='\$cgi_"</sql>
### <c>. $filter_param_name . </c> <sql>"_' </sql>
### <c>$filter_additional_keystr</c><sql>"</sql>
### <p />
### The <sql><i>SQL_order_command</i></sql> is the end part of SQL string 
### command: <sql>"order by \$cgi_" </sql><c>. $order_param_name .</c> 
### <sql> "_"</sql>. The <c>$order_param_name</c> scalar is CGI parameter name 
### that hold current field names used as a keys to sort the items list. This 
### CGI parameter name is set using <c>set_Order_Field_CGI_Var</c> function 
### (line 23) and mainly used as a parameter to store the current active order 
### key-fields passed via item field captions explained in the next paragraph. 
### <p />
### Item field captions can be dynamically set to mapped item field names 
### intended to be used as a key-fields for the list order (lines 25-29). 
### Inside the view template, the field captions are rendered as HTML links 
### using place-holders eclosed by MENU template-element (section 2, 
### paragraph 3, code lines 13-18). One single caption might be mapped to more 
### than one order key-fields thus the extra parameter setting (line 32) is 
### required to map the captions with their exact main-field names. These 
### information setting will be used by the module for the logic to display 
### the sequence of order key-fields used if current selected caption is 
### mapped to more than one single order key-fields.
### <p />
### The rest of available parameter setting are used to control other default 
### attributes of the generated dynamic items list. Read the comments included 
### before each function calls for the explanations of their purposes.
#_end_
#_code_num_ 9-9:#ffdddd,11-11:#ddffdd,13-21:#ffddff,23-23:#ddffff,25-29:#ffeedd,31-32 1
$component = new webman_db_item_view_dynamic;

$component->set_CGI($cgi);
$component->set_DBI_Conn($db_conn);

### Option to debug SQL satement generated by the module.
#$component->set_SQL_Debug(1);

#$component->set_SQL("select * from $table_name where key_field_name=\$cgi_key_field_name_ ... order by ...");

$component->set_Table_Name($table_name);

#$component->set_Filter_Field_Name($filter_field_name);

### Default is "filter_by_" . $field_name if $field_name 
### is set via previous set_Filter_Field_Name functon call
#$component->set_Filter_Field_CGI_Var($filter_param_name); 

### The possible generic string value for $filter_additional_keystr is:
### "[and|or] field_name_1='field_value_1' [and|or] ... [and|or] field_name_n='field_value_n'
#$component->set_Filter_Field_Additional_Keystr($filter_additional_keystr);

$component->set_Order_Field_CGI_Var($order_param_name);

$component->set_Order_Field_Caption("caption_1:...:caption_n");

### It can be 1 or many fields following standard SQL order syntax:
### field_name | field_name desc | field_name_1, ..., field_name_n desc | ...  
$component->set_Order_Field_Name("field_name_1:...:field_name_n"); 

### It's only [1 to 1] mapping
#$component->set_Map_Caption_Field("caption_1_ => field_1_, ..., caption_n_ => field_n_");

### Word pattern as a place-holder for item number in the list. 
### Default is "\$tld_num_".
#$component->set_Row_Num_Text_Pattern($item_number_word_pattern); 

### Default index number is 0, that is the first field/column name.
#$component->set_Default_Order_Field_Selected($order_field_index_num);  

### Page index numbers per set. Default is 15
#$component->set_List_Selection_Num($num);

### Current selected page index number. Default is 1.
#$component->set_DB_Items_Set_Num($num);

### Number of items per page. Default is 10.
#$component->set_DB_Items_View_Num($num);
  
### CGI parameter name that hold the value of number of items per page 
### set by the above set_DB_Items_View_Num function. Default is "inl".
#$component->set_INL_Var_Name($inl_param_name); 

### CGI parameter name to hold the value of number of  
### "Page Index Numbers Set" (PINS) for the purpose PINS's 
### quick jump operation. The value will be copied to CGI 
### parameter name set by the next set_Dynamic_Menu_Items_Set_Number_Var 
### function. Default parameter name used is "lsn".
#$component->set_LSN_Var_Name($lsn_param_name);

### The real CGI parameter name that hold the value of number of 
### current active PINS. Default parameter name used is
### "dmisn_" . $cgi->param("task");
$component->set_Dynamic_Menu_Items_Set_Number_Var($dmisn_param_name); 

### CGI parameter name that hold the current active page index number. 
### Default is: "dbisn_" . $cgi->param("task")
$component->set_DB_Items_Set_Num_Var($dbisn_param_name); 
                                                                     
### Add CGI parameter names and values to be passed via GET-method 
### on each hypertext links generated for item list captions and 
### item list page index numbers.   
#$component->set_Additional_GET_Data("get_data_1=get_value_1&...&get_data_n=get_value_n");

### Add hidden input-element inside the form used to control 
### item list pagination.
#$component->set_Additional_Hidden_POST_Data("post_data_1=post_value_1&...&post_data_n=post_value_n");                               

### Add CGI parameter names and values to be passed via GET-method 
### on each link items of current application's link path.
#$component->set_Link_Path_Additional_Get_Data("cgi_var_name_1=cgi_var_value_1_&...&cgi_var_name_n=cgi_var_value_n_"); 

$component->set_Template_Default($template_file);
 
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>4. Component-type Generic Function Calls</b>
### <p />
#_end_
#_code_num_ 0 85
if ($component->authenticate) {
    $component->run_Task;
    $component->process_Content;
    $component->end_Task;
}

my $content = $component->get_Content;
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>5. Child Module for Customization</b>
### <p />
### Most common customizations are to manipulate Table_List_Data instance of 
### the items list (lines 44-46, 54-61, and 70-80), and programmatically modify the 
### SQL string command to support more complex database query logic (line 97). 
#_end_
#_code_num_ 44-46:#ffdddd,54-61:#ffdddd,70-80:#ffdddd,97-97:#ddffdd 1
package <trp><i>child_module_name</i></trp>;

use webman_db_item_view_dynamic;

@ISA=("webman_db_item_view_dynamic");

sub new {
    my $class = shift;
    
    my $this = $class->SUPER::new();
    
    #$this->set_Debug_Mode(1, 1);
    
    bless $this, $class;
    
    return $this;
}

sub get_Name {
    my $this = shift @_;
    
    return __PACKAGE__;
}

sub get_Name_Full {
    my $this = shift @_;
    
    return $this->SUPER::get_Name_Full . "::" . __PACKAGE__;
}

sub customize_TLD {
    my $this = shift @_;
    
    my $tld = shift @_;
    
    my $cgi = $this->get_CGI;
    my $dbu = $this->get_DBU;
    my $db_conn = $this->get_DB_Conn;
    
    my $caller_get_data = $cgi->generate_GET_Data("link_id");
    
    ### Add new column to represent HTML's CSS class to 
    ### control the view presentation of HTML-table rows.
    $tld->add_Column("row_class");
    
    my $row_class = "row_odd";
    
    for (my $i = 0; $i < $tld->get_Row_Num; $i++) {
        ### The below implementations assume that the CSS class "row_odd" and 
        ### "row_even" have been already defined and ready to be used inside 
        ### the view template. Refer back to section 2 (the proposed view 
        ### template) and see how the "$tld_row_class_" word pattern act as a 
        ### place-holder inside the main list template-element.
        $tld->set_Data($i, "row_class", "$row_class");
        
        if ($row_class eq "row_odd") {
            $row_class = "row_even";
            
        } else {
            $row_class = "row_odd";
        } 
        
        ### Other possible implementations of customization to manipulate the 
        ### existing column's data of Table_List_Data instance ($tld) to make 
        ### one of its column becomes an active hypertext links. The scalar 
        ### ($get_data) should be a list of additional CGI parameters written 
        ### in GET-data string format ("&param1=value1&param2=$value2&..."). 
        ### The $link_properties is a string represent the attributes of the 
        ### HTML <a> tag: <a href="..." $link_properties>...</a> 
        #my $col_name = "...";
        
        #my $get_data = $caller_get_data . "...";
        #my $link_properties = "...";
        
        #my $tld_data = $tld->get_Data($i, $col_name);
        
        #$tld_data = "<font color=\"#0099FF\">$tld_data</font>";
        
        #$tld->set_Data($i, $col_name, $tld_data);
        #$tld->set_Data_Get_Link($i, $col_name, "index.cgi?$get_data", $link_properties);       
        
    }
    
    return $tld;
}

sub customize_SQL { ### so_type_ can be: VIEW, DYNAMIC, LIST, MENU, DBHTML, SELECT, DATAHTML
    my $this = shift @_;

    my $cgi = $this->get_CGI;
    my $dbu = $this->get_DBU;
    my $db_conn = $this->get_DB_Conn;
    
    my $sql = $this->{sql};
    
    ### Next is to customize the $sql string
    #$sql = ...;
    
    return $sql;
}

1;
#_end_
#_doc_
<a href="./txtsrc/webman_db_item_view_dynamic_child.txt">Get code...</href>
#_end_