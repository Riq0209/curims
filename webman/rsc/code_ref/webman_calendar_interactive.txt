#_title_
webman_calendar_interactive
#_end_

#_des_
### Component-type module that provides interactive navigation (monthly) on  
### calendar data.
#_end_

#_dep_
### <b>Webman-framework's Core Modules:</b><br />
### <ul>
### <li>Calendar (Composition)</li>
### <li>Table_List_Data (Composition)</li>
### <li>TLD_HTML_Map (Composition)</li>
### </ul>
### <br />
### <b>Webman-framework's Component-type Modules:</b><br />
### <ul>
### <li>CGI_Component::webman_CGI_component (Inheritance)</li>
### </ul>
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>1. CGI Parameters</b>
### <p />
### Below are CGI parameters that provide control to and passed by 
### webman_calendar_interactive instance at application run-time. 
#_end_
calendar_year => "yyyy-mm-dd"
calendar_month => "Jan", "Feb", ... , "Dec"
calendar_date => 1, 2, ... , 31
calendar_day => 1, 2, ... , 7
calendar_ymd_selected => "yyyy-mm-dd"
#_doc_
### The CGI parameters <c>calendar_ymd_selected</c> and <c>calendar_day</c> 
### (passed over HTTP-GET method) are used by the module to provide calendar's 
### date information picker facility.
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>2. View Template</b>
### <p />
### The main part of view template content for webman_calendar_interactive  
### module is actually a LIST template-element (33-41), passed to 
### <c>process_LIST</c> hook function and processed by TLD_HTML_Map core module. 
### The LIST template-element contains the formation of word patterns 
### <c>$tld_date1_</c>, <c>...</c>, <c>$tld_date7_</c> and 
### <c>$tld_date1_content_</c>, <c>...</c>, <c>$tld_date1_content_</c> as 
### place-holders for calendar's date and date's content.
### <p />
#_end_
#_code_num_ 33-41
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<!-- start_view_ //-->
<table width="315" border="1">
  <tr>
    <td width="45" colspan="7" align="center">
      <a href="<!-- dynamic_content_ name=cal_prev_month_link //-->">&lt;&lt;</a>
      $active_month_
      <a href="<!-- dynamic_content_ name=cal_next_month_link //-->">&gt;&gt;</a>
      &nbsp;&nbsp;
      $active_year_
    </td>
  </tr>
  <tr>
    <td align="center" width="45">Mon</td>
    <td align="center" width="45">Tue</td>
    <td align="center" width="45">Wed</td>
    <td align="center" width="45">Thu</td>
    <td align="center" width="45">Fri</td>
    <td align="center" width="45">Sat</td>
    <td align="center" width="45">Sun</td>
  </tr>
  <!--
  $tld_d1_ ... $tld_d7_ are used to display date
  $tld_dc1_ ... $tld_dc7_ are used to display content on particular yyyy-mm-dd
  -->
  <!-- start_list_ //-->
  <tr>
    <td align="center" valign="top" width="45" $tld_cell1_color_>$tld_date1_ $tld_date1_content_</td>
    <td align="center" valign="top" width="45" $tld_cell2_color_>$tld_date2_ $tld_date2_content_</td>
    <td align="center" valign="top" width="45" $tld_cell3_color_>$tld_date3_ $tld_date3_content_</td>
    <td align="center" valign="top" width="45" $tld_cell4_color_>$tld_date4_ $tld_date4_content_</td>
    <td align="center" valign="top" width="45" $tld_cell5_color_>$tld_date5_ $tld_date5_content_</td>
    <td align="center" valign="top" width="45" $tld_cell6_color_>$tld_date6_ $tld_date6_content_</td>
    <td align="center" valign="top" width="45" $tld_cell7_color_>$tld_date7_ $tld_date7_content_</td>
  </tr>
  <!-- end_list_ //-->
</table>
<!-- end_view_ //-->
</body>
</html>
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>3. Instantiation and Basic Parameter Setting</b><p />
### The arguments <c>$normal</c>, <c>$current</c>, <c>$selected</c>, 
### <c>$odd</c>, <c>$even</c>, and <c>$color_cell</c> (lines 06-14) are 
### strings represent HTML-color codes in hexadecimal fromat number 
### (<c>"#RRGGBB"</c>).
#_end_
#_code_num_
my $component = new webman_calendar_interactive;

$component->set_CGI($cgi);
$component->set_DBI_Conn($db_conn);
        
#$component->set_Default_Text_Colors($normal, $current, $selected);

#$component->set_Default_Cell_Colors($normal, $current, $selected);

#$component->set_Default_Column_Color($odd, $even);
#$component->set_Default_Row_Color($odd, $even);

#$component->set_Date_Cell_Color("yyyy-mm-dd", $color_cell);
#$component->set_Date_Text_Color("yyyy-mm-dd", $color_cell);

#$component->add_Date_Content("yyyy-mm-dd", $content);

#$component->set_Template_Default($template_file);
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>4. Component-type Generic Function Calls</b><p />
#_end_
$component->run_Task;
$component->process_Content;
$component->end_Task;

my $content = $component->get_Content;

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>5. Child Module for Customization</b><p /> 
### Most basic customization is to add content into specific calendar's 
### date-cell, done inside the overriden <c>run_Task</c> hook function 
### (line 57). Other more advanced and complex customization tasks are 
### involving calendar's data-structure manipulations inside 
### <c>customize_TLD</c> function.
### <p />
### Calendar's data-structure instance (<c>$tld</c>) passed to 
### <c>customize_TLD</c> function (line 110) is actually Table_List_Data core 
### module instance. Read the comments included inside the skeleton code to get 
### more detailed explanations for all possible customizations that could be made. 
#_end_
#_code_num_ 57-57,110-110 1
package <trp><i>child_module_name</i></trp>;

use webman_calendar_interactive;

@ISA=("webman_calendar_interactive");

sub new {
    my $class = shift;
    
    my $this = $class->SUPER::new();
    
    #$this->set_Debug_Mode(1, 1);
    
    bless $this, $class;
    
    return $this;
}

sub get_Name {
    my $this = shift @_;
    
    return __PACKAGE__;
}

sub get_Name_Full {
    my $this = shift @_;
    
    return $this->SUPER::get_Name_Full . "::" . __PACKAGE__;
}

sub run_Task {
    my $this = shift @_;
    
    my $cgi = $this->get_CGI;
    my $dbu = $this->get_DBU;
    my $db_conn = $this->get_DB_Conn;
    
    my $login_name = $this->get_User_Login;
    my @groups = $this->get_User_Groups;
    
    my $match_group = $this->match_Group($group_name_, @groups);
    
    #$this->set_Error("???");
    
    $this->SUPER::run_Task();
    
    #$this->set_Default_Text_Colors("#all_", "#current_", "#selected_");

    #$this->set_Default_Cell_Colors("#all_", "#current_", "#selected_");

    #$this->set_Default_Column_Color(#odd_, #even_");
    #$this->set_Default_Row_Color(#odd_, #even_");

    #$this->set_Date_Cell_Color("yyyy-mm-dd", "#color_");
    #$this->set_Date_Text_Color("yyyy-mm-dd", "#color_");

    #$this->add_Date_Content("yyyy-mm-dd", "content_");
}

sub process_Content {
    $this = shift @_;
    
    my $cgi = $this->get_CGI;
    my $dbu = $this->get_DBU;
    my $db_conn = $this->get_DB_Conn;
    
    $this->set_Template_File($this->{template_default});
    
    #print "\$this->{template_default} = " . $this->{template_default} . "<br>";
    
    $this->SUPER::process_Content;  
}

sub process_so_type_ { ### so_type_ can be: VIEW, DYNAMIC, LIST, MENU, DBHTML, SELECT, DATAHTML
    my $this = shift @_;
    my $te = shift @_;

    my $cgi = $this->get_CGI;
    my $dbu = $this->get_DBU;
    my $db_conn = $this->get_DB_Conn;
    
    my $login_name = $this->get_User_Login;
    my @groups = $this->get_User_Groups;
    
    my $match_group = $this->match_Group($group_name_, @groups);
    
    my $te_content = $te->get_Content;
    my $te_type_num = $te->get_Type_Num;
    
    #my $te_type_name = $te->get_Name;
    
    $this->add_Content($te_content);
    
    #if ($this->get_Error eq "") {
    #   $this->add_Content($te_content);
        
    #} else {
    #   $this->add_Content($this->get_Error);
    #}
}

sub customize_TLD {
    my $this = shift @_;
    
    ### The $tld instance has the column names and structure as follows:
    ### 'date1', ..., 'date7', 
    ### 'cell1_color', ..., 'cell7_color', 
    ### 'date1_iso', ..., 'date7_iso',
    ### 'date1_content', ..., 'date7_content'    
    my $tld = shift @_;
    
    my $cgi = $this->get_CGI;
    my $dbu = $this->get_DBU;
    my $db_conn = $this->get_DB_Conn;
    
    my $std_get_data = $cgi->generate_GET_Data("link_id");
    
    ### Add other possible new columns (link_1, ..., link_7).
    #for (my $cell_num = 1; $cell_num <= 7; $cell_num++) {
    #    $tld->add_Column("link" . $cell_num);
    #}
    
    for (my $i = 0; $i < $tld->get_Row_Num; $i++) { 
        ### Next possible operations on new columns (link_1, ..., link_7).
        #for (my $cell_num = 1; $cell_num <= 7; $cell_num++) {
        #    my $date_iso = $tld->get_Data($i, "date" . $cell_num . "_iso");
        #    my $link_properties = "title=\"Click to do something...\"";
        #    
        #    if ($date_iso ne "") {
        #        $tld->set_Data($i, "link" . $cell_num, "Link...?");
        #        $tld->set_Data_Get_Link($i, "link" . $cell_num, 
        #                                    "index.cgi?$std_get_data&calendar_ymd=$date_iso", 
        #                                    "$link_properties");
        #    }
        #}
    }
    
    $cgi->add_Debug_Text($tld->get_Table_List, __FILE__, __LINE__);
    
    return $tld;
}

1;
#_end_
#_doc_
<a href="./txtsrc/webman_calendar_interactive_child.txt">Get code...</href>
#_end_