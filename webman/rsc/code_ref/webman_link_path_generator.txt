#_title_
webman_link_path_generator
#_end_

#_des_
### Component-type module that provides facilities to extract and generate  
### application's link path structure based on current active link-node ID.  
### The current active node is actually the end node of the generated link 
### path structure. 
#_end_

#_dep_
### <b>Webman-framework's Component-type Modules:</b><br />
### <ul>
### <li>CGI_Component::webman_CGI_component (Inheritance)</li>
### </ul>
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>1. View Template</b>
### <p />
### The view template simply contains single word pattern 
### <c>$LINK_PATH_DYNAMIC_</c> enclosed inside the VIEW template-element. This 
### word pattern is used as a place-holder for link path text content 
### generated by the module.  
### <p />
#_end_
<html>
<body>
<!-- start_view_ //-->
$LINK_PATH_DYNAMIC_
<!-- end_view_ //-->
</body>
</html>

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>2. Instantiation and Basic Parameter Setting</b>
### <p />
### Most basic parameter settings are to set the current link path data 
### structure, link-properties for each link-nodes, and to control the view 
### presentation of the generated link path structure. Detailed explanations 
### for each of these basic parameter settings are given as a comments before 
### each function calls.
### <p />
### The parameter settings (lines 33-34) are quite special since they are used 
### specifically to compensate some missing feature of the module as 
### component-type module. The module is intended to be used entirely as a 
### black-box component inside other client modules and it's too rare to 
### have the module directly called inside the main-controller or component 
### selector sub-controller with particular link-node ID or component-selector 
### ID referenced to it. This situation prohibit the module from able to carry 
### out dynamic component parameter settings at application runtime through 
### queries from database table as specified by its base module 
### (webman_CGI_component) generic implementations. The function calls 
### (lines 33-34) can addrress this issue by using template-element name 
### passed to the module and the module name itself as a keys for dynamic 
### component parameter settings via database queries. However, within the 
### framework implementation sructure it's limited to global component 
### parameter settings without specific back-reference to link-node ID or 
### component-selector ID which contsruct the overall application main link 
### structure.
#_end_
#_code_num_ 33-34:#ffdddd 1
my $component = new webman_link_path_generator;

$component->set_CGI($cgi);
$component->set_DBI_Conn($db_conn);

### Get current link path info. from the client component which make a call
### to the current component. The client component commonly get the link path 
### info. from framework's main controller.
$component->set_Link_Path($this->get_Link_Path);

### Options to add GET-data's parameter-value on each link-nodes. The string 
### argument for set_Carried_GET_Data function call is all possible existing 
### CGI parameters (separated by spaces) which are already exists at the 
### application runtime with the exceptions of special farmework's CGI 
### parameters ("app_name", "session_id", "link_name", and "link_id")
#$component->set_Carried_GET_Data("param_name_1 ... param_name_2"); 
#$component->set_Additional_GET_Data("param_name_1=value_1&...&param_name_n=value_n");

### Options to cut some of the beginning and ending nodes of the link path.
### For n number of nodes that construct the link path structure, both 
### $level_start and $level_deep arguments will have their possible values 
### in the range of 0 to n-1 and must always in the condition of 
### $level_start < $level_deep.
#$component->set_Level_Start($level_start);
#$component->set_Level_Deep($level_deep);

### Default HTML object used as link  path nodes separator is "&gt;". 
$component->set_Separator_Tag($html_object);


### The next two function calls must be made exactly in the 
### order as given below. 
$component->set_Current_Dynamic_Content_Name($te_type_name);
$component->set_Module_DB_Param;

$component->set_Template_Default($template_file);
 
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>3. Component-type Generic Function Calls</b>
### <p />
#_end_
#_code_num_ 0 30
$component->run_Task;
$component->process_Content;

my $content = $component->get_Content;
#_end_