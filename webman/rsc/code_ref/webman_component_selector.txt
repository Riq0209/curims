#_title_
webman_component_selector
#_end_

#_des_
### Component-type module that acts as sub-controller inside framework's 
### main-controller (webman_main) to provide dynamic selection logic of 
### other component-type modules through the message passed using special 
### CGI parameter commonly named as <c>task</c>. It's possible for the 
### sub-controller to have the selection logic point back to the 
### sub-controller itself (recursive module calls). This type of 
### sub-controller implementations give the framework some degree of 
### flexibilities to construct more complex component selection logic 
### structure besides the basic logical structure provided by the application 
### main link structure.
#_end_

#_dep_
### <b>Webman-framework's Component-type Modules:</b><br />
### <ul>
### <li>CGI_Component::webman_CGI_component (Inheritance)</li>
### <li>webman_component_selector (Recursive Composition)</li>
### <li>All other available component-type modules (Composition)</li>
### </ul>
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>1. Component Selection Logic Example</b>
### <p />
### Below is an example of how webman_component_selector module is used to 
### arrange other component-type modules selection logic under the link-node 
### "Course" using framework's web-based development support tool. 
### <p />
### <img src="webman_component_selector.jpg">
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>2. View Template</b>
### <p />
### The template simply contains DYNAMIC_CONTENT template-element named 
### <c>default</c>. It becomes a place-holder for view content generated by 
### other component-type modules which are under the control of component 
### selection logic imposed by webman_component_selector module.
#_end_
#_code_num_ 4-4:#ffdddd 1
<html>
<body>
<!-- start_view_ //-->
<!-- dynamic_content_ name=default //-->
<!-- end_view_ //-->
</body>
</html>
#_end_