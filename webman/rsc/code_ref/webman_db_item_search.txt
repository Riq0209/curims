#_title_
webman_db_item_search
#_end_

#_des_
### Component-type module that provides dynamic control on database table 
### items for basic search operation. It might be integrated with other 
### component-types module for database item update/delete operations.
### 
#_end_

#_dep_
### <b>Webman-framework's Core Modules:</b><br />
### <ul>
### <li>CGI_HTML_Map (Composition)</li>
### </ul>
### <br />
### <b>Webman-framework's Component-type Modules:</b><br />
### <ul>
### <li>CGI_Component::webman_CGI_component (Inheritance)</li>
### <li>webman_db_item_view (Composition)</li>
### <li>webman_db_item_view_dynamic (Composition)</li>
### <li>webman_link_path_generator (Composition)</li>
### </ul>
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>1. View Template</b>
### <p />
### Generally there are two types of view template files must be assigned to a 
### single webman_db_item_search module. First is a form page for search's 
### key-field entries and the second is a result page for displaying the 
### found search item(s).
### <p />
### <b>1.1 Key-field Entries Form Page</b>
### <p />
### There are three DYNAMIC_CONTENT template-elements used. All will be passed 
### to and processed inside module's <c>process_DYNAMIC</c> hook function. The 
### first (line 4) named <c>link_path</c> will be manipulated by 
### <c>webman_link_path_generator</c> core module and becomes the place-holder 
### to render current application's link path when webman_db_item_search 
### module is called. The next (line 8) named <c>form_hidden_field</c> is used 
### as place-holder for HTML-form's hidden input-element. This hidden 
### input-element is used as an entity to pass the parameter named 
### <c>link_id</c> (via POST-method) which is the standard CGI parameter name 
### used to refer nodes' IDs that construct the overall application's link 
### structure. The logic is to use again node's link-id which is used to call 
### webman_db_item_search module previously. The last (line 33) is used as 
### place-holder for search result content generated by either 
### webman_db_item_view or webman_db_item_view_dynamic modules.
### <p />
### HTML-form input-elements for search key-field entries are enclosed 
### inside the CGIHTML template-element (lines 11-24). Input-element names are 
### just simply a direct mappings of field names (<c><i>key_field_1</i></c>, 
### <c>...</c>, <c><i>key_field_n</i></c>) from the involved database table.
### Inside the CGIHTML template-element, CGI parameters which are the previous 
### entered key-field values are mapped back as input-element values using the 
### word patterns <c>$cgi_<i>key_field_1</i>_</c>, <c>...</c>, 
### <c>$cgi_<i>key_field_n</i>_</c>.
#_end_
#_code_num_ 4-4:#ffdddd,8-8:#ddffdd,11-24:#ffddff,33-33:#ddffff 1
<html>
<body>
<!-- start_view_ //-->
<!-- dynamic_content_ name=link_path //-->
<p />

<form method="POST" action="./index.cgi">
<!-- dynamic_content_ name=form_hidden_field //-->
<table>
<!-- start_cgihtml_ //-->
<tr>
  <td>key_field_1_caption</td>
  <td>
    <input name="key_field_1" type="text" id="key_field_1" value="$cgi_key_field_1_">
  </td>
</tr>
...
...
<tr>
  <td>key_field_n_caption</td>
  <td>
    <input name="key_field_n" type="text" id="key_field_n" value="$cgi_key_field_n_">
  </td>
</tr>
<!-- end_cgihtml_ //-->
<tr>
  <td>&nbsp;</td>
  <td><input name="button_submit" type="submit" id="button_submit" value="Search" /></td>
</tr>
</table>
</form>

<!-- dynamic_content_ name=search_result //-->

<!-- end_view_ //-->
</body>
</html>
#_end_
#_doc_
### <b>1.2 Search Result Pages</b>
### <p />
### Since the result might be a single or multiple rows of items, so for the 
### result pages to be used. There are two types of result pages assigned to 
### the module at once. One is for single-row result processed by 
### webman_db_item_view module and the other one is for multi-rows result 
### processed by webman_db_item_view_dynamic module.
### <p />
### <b>1.2.1 Single-row Result Page</b>
#_end_
#_code_num_ 6-8:#ffdddd 1
<html>
<body>
<!-- start_view_ //-->
<table border="1">
  <!-- start_dbhtml_ //-->
  <tr><th>field_caption_1</th><td>$db_field_name_1_</td></tr>
  ...
  <tr><th>field_caption_n</th><td>$db_field_name_n_</td></tr>
  <!-- end_dbhtml_ //-->
</table>
<!-- end_view_ //-->
</body>
</html>
#_end_
#_doc_
### <b>1.2.2 Multi-rows Result Page</b>
#_end_
#_code_num_ 5-7:#ffdddd,18-23:#ddffdd,29-29:#ffffdd,30-30:#ffddff,31-35:#ffffdd,36-36:#ddffff,37-41:#ffffdd,42-42,43-44:#ffffdd, 1
<html>
<body>
<!-- start_view_ //-->

<!-- dynamic_content_ name=db_items_num_begin //--> -
<!-- dynamic_content_ name=db_items_num_end //--> of
<!-- dynamic_content_ name=db_items_num_total //--> Records.

<table border="1">
  <tr>
    <th>Num.</th>
    <th>field_caption_1</th>
    ...
    <th>field_caption_n</th>
  </tr>

  <!-- start_list_ name=main //-->
  <tr>
    <td align="right">$tld_num_.</td>
    <td>$tld_field_name_1_</td>
    ...
    <td>$tld_field_name_n_</td>
  </tr>
  <!-- end_list_ //-->
</table>

<p />

<form name="tld_view_dynamic" method="post" action="index.cgi">
  <!-- dynamic_content_ name=form_hidden_field //-->

  Items/List: <input name="inl" type="text" id="inl" value="$inl_" size="3">
  &nbsp;

  <!-- start_menu_ name=list //-->
    dynamic_menu_items_
  <!-- end_menu_ //-->
  &nbsp;

  List Set Num. :
  <select name="lsn" onChange="document.tld_view_dynamic.submit()">
    <!-- select_ name=lsn //-->
  </select>
</form>
<!-- end_view_ //-->
</body>
</html>
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>2. Instantiation and Basic Parameter Setting</b>
### <p />
### SQL command string for database items search operation is automatically 
### generated based on arguments passed at lines 6-7. For more complex 
### search's SQL command, it can be optionally done as shown at line 10. 
### Search's key-field value entries passed as CGI parameters are mapped inside 
### the SQL string arguments in the form of 
### <c>$cgi_<i>key_field_name</i>_</c>. For other parameter settings read the 
### comments provided for each function calls below. 
#_end_
#_code_num_ 6-7:#ffdddd,10-10:#ddffdd 1
my $component = new webman_db_item_search;

$component->set_CGI($cgi);
$component->set_DBI_Conn($db_conn);

$component->set_Table_Name($table_name);
$component->set_Key_Field_Search("key_field_1 ... key_field_n");

### Option to manually set the SQL command for more complex search operation. 
#$component->set_SQL("select * from $table_name where key_field_name='$cgi_key_field_name_' ...");

### Table's primary key to be injected as CGI parameter and to be used 
### as a key-field when search operation is integrated with update/delete 
### operations. 
$component->set_Key_Field_Primary($key_field_primary);

### Options to debug the sql statement used for
### search operation as a CGI debug text. Default is
### set to 0.
#$component->set_SQL_Debug(1);

### Option to customize the not found item message. Default is: 
### "<font color=\"#FF0000\">No item found for current search entry.</font>"
#$component->set_Not_Found_Message("...");


### Redirect to other page when item is found. Normally it would be applied 
### when single item was found and search operation is also integrated with 
### update/delete operations. The implementation is done by customizing 
### the redirect_Page module's function via function overriding. 
#$component->set_Item_Found_URL_Redirect("./index.cgi?link_id=$cgi_link_id_&task=...");

### The three view templates for search's key-field entries, single-row result 
### page, and multi-rows result page.
$component->set_Template_Default($template_field_form);
$component->set_Template_Default_Found($template_found);
$component->set_Template_Default_Found_List($template_found_list);
#_end_

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>3. Component-type Generic Function Calls</b>
### <p />
#_end_
if ($component->authenticate) {
    $component->run_Task;
    $component->process_Content;
    $component->end_Task;
}

my $content = $component->get_Content;

#_sec_ ------------------------------------------------------------------------
#_doc_
### <b>4. Child Module for Customization</b>
### <p />
### Most basic customization (lines 45-48) is to deal with the situation where 
### search operation return result no matter either single-row or multi-rows 
### items. 
### <p />
### If the manual setting (section 2, line 10) is inadequate to generate the 
### required complex search's SQL string command, it can be done programmatically 
### inside the <c>customize_SQL</c> hook function (line 63).
### <p />
### Most common customzation tasks inside <c>redirect_Page</c> hook function 
### is to distinct the situations of single found item, and no item was found 
### or multi-rows returned items. If single item was found and page 
### redirection is set using <c>set_Item_Found_URL_Redirect</c> function 
### (section 2, line 31) the module can be set to just continue it 
### (line 77-79). For the case of multi-rows returned items, integration with 
### update/delete operations, and page redirection has been set, the module 
### could be set to not continue the page redirection (lines 81-85). This will 
### allow the module to first list the returned item rows and let the users  
### choose the exact single item they want to update/delete.
#_end_
#_code_num_ 45-48:#ffdddd,63-63:#ddffdd,77-79:#ffddff,81-85:#ddffff 1
package <trp><i>child_module_name</i></trp>;

use webman_db_item_search;

@ISA=("webman_db_item_search");

sub new {
    my $class = shift;
    
    my $this = $class->SUPER::new();
    
    #$this->set_Debug_Mode(1, 1);
    
    bless $this, $class;
    
    return $this;
}

sub get_Name {
    my $this = shift @_;
    
    return __PACKAGE__;
}

sub get_Name_Full {
    my $this = shift @_;
    
    return $this->SUPER::get_Name_Full . "::" . __PACKAGE__;
}

sub run_Task {
    my $this = shift @_;
    
    my $cgi = $this->get_CGI;
    my $dbu = $this->get_DBU;
    my $db_conn = $this->get_DB_Conn;
    
    my $login_name = $this->get_User_Login;
    my @groups = $this->get_User_Groups;
    
    my $match_group = $this->match_Group($group_name_, @groups);
    
    my $status = $this->SUPER::run_Task;
    
    if ($this->{found}) {
        ### extra tasks when search item was found
        ### ???
    }
    
    return $status;
}

sub customize_SQL {
    my $this = shift @_;

    my $cgi = $this->get_CGI;
    my $dbu = $this->get_DBU;
    my $db_conn = $this->get_DB_Conn;
    
    my $sql = $this->{sql};
    
    ### Next is to customize the $sql string.
    $sql = ...;
    
    return $sql;
}

sub redirect_Page {
    my $this = shift @_;
    my $te = shift @_;

    my $cgi = $this->get_CGI;
    my $db_conn = $this->get_DB_Conn;
    my $db_interface = $this->get_DB_Interface;
    
    if ($cgi->param("button_submit") eq "Search" && $this->{total_item_found} == 1) {
        ### Continue to run other module via page redirect.
        $this->SUPER::redirect_Page;
        
    } else {
        ### Search item was not found or search operation return multi-rows 
        ### result. Do nothing!!!
    }
}

1;
#_end_
#_doc_
<a href="./txtsrc/webman_db_item_search_child.txt">Get code...</href>
#_end_